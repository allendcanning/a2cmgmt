AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Athletes to College Portal
Globals:
  Function:
    Runtime: python3.7
    Timeout: 30
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-729d3814
  AdminCognitoDomain:
    Type: String
    Default: thefirmu-admin
  AdminContentUrl:
    Type: String
    Default: "https://adminportal.thefirmu.org"
  Environment:
    Type: String
    Default: "prod"
  ConfigurationSet:
    Type: String 
    Default: "theFirmu"
Mappings:
  VPC2Subnet:
    vpc-729d3814:
      Subnets:
        - "subnet-76ade63f"
        - "subnet-8c44d6d7"
        - "subnet-be65cf82"
Resources:
  LambdaForCloudFormation:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaForCloudFormation
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        -
          PolicyName: WriteCloudWatchLogs
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        -
          PolicyName: UpdateUserPoolClient
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:UpdateUserPoolClient'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
        -
          PolicyName: ManageUserPoolDomain
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:CreateUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DeleteUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DescribeUserPoolDomain'
                Resource: '*'
        -
          PolicyName: InvokeLambdaFunction
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: 'arn:aws:lambda:*:*:function:*'
  CloudFormationSendResponse:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CloudFormationSendResponse
      Runtime: nodejs8.10
      Code: ./CloudFormationSendResponse
      Handler: index.handler
      Role: !GetAtt LambdaForCloudFormation.Arn
  CloudFormationCognitoUserPoolClientSettings:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CloudFormationCognitoUserPoolClientSettings
      Runtime: nodejs8.10
      Code: ./CloudFormationCognitoUserPoolClientSettings.js
      Handler: CloudFormationCognitoUserPoolClientSettings.handler
      Role: !GetAtt LambdaForCloudFormation.Arn
    DependsOn: CloudFormationSendResponse
  CloudFormationCognitoUserPoolDomain:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CloudFormationCognitoUserPoolDomain
      Runtime: nodejs8.10
      Code: ./CloudFormationCognitoUserPoolDomain.js
      Handler: CloudFormationCognitoUserPoolDomain.handler
      Role: !GetAtt LambdaForCloudFormation.Arn
    DependsOn: CloudFormationSendResponse
  theFirmuAdminCognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
         AllowAdminCreateUserOnly: True
         InviteMessageTemplate:
           EmailMessage: "Welcome to The Firmu Admin!  Below you will find your username and temporary password.  Please go to https://adminportal.thefirmu.org to change your password.\n\nYour username is {username} and temporary password is {####}. \n\nThank you for being a member of The FirmU!"
           EmailSubject: "Welcome to The FirmU Admin!"
      AutoVerifiedAttributes:
        - email
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: False
        DeviceOnlyRememberedOnUserPrompt: False
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        ReplyToEmailAddress: admin@thefirmu.org
        SourceArn: !Join ['',['arn:aws:ses:',!Ref "AWS::Region",':',!Ref "AWS::AccountId",':identity/admin@thefirmu.org']]
      EmailVerificationMessage: "Your FirmU verification code is {####}. Please go to https://adminportal.thefirmu.org"
      EmailVerificationSubject: "Your FirmU verification code"
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True
          RequireUppercase: True
          TemporaryPasswordValidityDays: 7
      Schema:
        - AttributeDataType: String
          Mutable: True
          Name: email
          Required: True
      UserPoolName: "thefirmu-admin"
  theFirmuAdminCognitoClientSettings:
    Type: 'Custom::CognitoUserPoolClientSettings'
    DependsOn: theFirmuAdminCognitoClient
    Properties:
      ServiceToken: !GetAtt CloudFormationCognitoUserPoolClientSettings.Arn
      UserPoolId: !Ref theFirmuAdminCognitoPool
      UserPoolClientId: !Ref theFirmuAdminCognitoClient
      SupportedIdentityProviders:
        - COGNITO
      CallbackURL: !Join ['',[!Ref AdminContentUrl,',https://',!GetAtt ['LoadBalancer','DNSName'],'/oauth2/idpresponse,',!Ref AdminContentUrl,'/oauth2/idpresponse,https://',!GetAtt ['LoadBalancer','DNSName']]]
      LogoutURL: !Ref AdminContentUrl
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - openid
  theFirmuAdminDomain:
    Type: 'Custom::CognitoUserPoolDomain'
    Properties:
      ServiceToken: !GetAtt CloudFormationCognitoUserPoolDomain.Arn
      UserPoolId: !Ref theFirmuAdminCognitoPool
      Domain: !Ref AdminCognitoDomain
  theFirmuDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "username"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "username"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "thefirmu_user_info-prod"
  theFirmuDynamoDBTableDev:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "username"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "username"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "thefirmu_user_info-dev"
  coachesDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "email"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "coaches-prod"
  coachesDynamoDBTableDev:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "email"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "coaches-dev"
  theFirmuAdminCognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: admin
      ExplicitAuthFlows: 
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: True
      RefreshTokenValidity: 30
      UserPoolId: !Ref theFirmuAdminCognitoPool
  adminContentURLSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: !Join ['',['/a2c/', !Ref Environment, '/admin_content_url']]
      Type: String
      Value: !Ref AdminContentUrl
  adminContentURLDevSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: '/a2c/dev/admin_content_url'
      Type: String
      Value: !Ref AdminContentUrl
  cognitoAdminPoolSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: !Join ['',['/a2c/', !Ref Environment, '/admin_cognito_pool']]
      Type: String
      Value: !Ref theFirmuAdminCognitoPool
  cognitoAdminPoolDevSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: '/a2c/dev/admin_cognito_pool'
      Type: String
      Value: !Ref theFirmuAdminCognitoPool
  cognitoAdminClientIdSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: !Join ['',['/a2c/', !Ref Environment, '/admin_cognito_client_id']]
      Type: String
      Value: !Ref theFirmuAdminCognitoClient
  cognitoAdminClientIdDevSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: '/a2c/dev/admin_cognito_client_id'
      Type: String
      Value: !Ref theFirmuAdminCognitoClient
  cognitoAdminAuthUrlSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['',['/a2c/', !Ref Environment, '/admin_cognito_auth_url']]
      Type: String
      Value: !Join ['',['https://',!Ref AdminCognitoDomain,'.auth.us-east-1.amazoncognito.com/oath2/']]
  cognitoAdminAuthUrlDevSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/a2c/dev/admin_cognito_auth_url'
      Type: String
      Value: !Join ['',['https://',!Ref AdminCognitoDomain,'.auth.us-east-1.amazoncognito.com/oath2/']]
  dynamoDBTableNameSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: '/a2c/prod/table_name'
      Type: String
      Value: !Ref theFirmuDynamoDBTable
  dynamoDBTableNameDevSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: '/a2c/dev/table_name'
      Type: String
      Value: !Ref theFirmuDynamoDBTableDev
  coachesTableNameSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: '/a2c/prod/coaches_table_name'
      Type: String
      Value: !Ref coachesDynamoDBTable
  coachesTableNameDevSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: '/a2c/dev/coaches_table_name'
      Type: String
      Value: !Ref coachesDynamoDBTableDev
  sesConfigurationSetSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: !Join ['',['/a2c/', !Ref Environment, '/ses_configuration_set']]
      Type: String
      Value: !Ref ConfigurationSet
  sesConfigurationSetDevSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: '/a2c/dev/ses_configuration_set'
      Type: String
      Value: !Ref ConfigurationSet
  mgmtPortalDynamoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "thefirmu.dynamodb.allow"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: Allow
          Action: [ "dynamodb:PutItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:Query",
                "dynamodb:UpdateItem"
          ]
          Resource: [ 
            !GetAtt theFirmuDynamoDBTable.Arn,
            !GetAtt coachesDynamoDBTable.Arn,
            !GetAtt theFirmuDynamoDBTableDev.Arn,
            !GetAtt coachesDynamoDBTableDev.Arn
          ]
      Roles:
        - !Ref "mgmtPortalRole"
  mgmtPortalSESPolicy:
   Type: AWS::IAM::Policy
   Properties:
     PolicyName: "thefirmu.ses.allow"
     PolicyDocument:
       Version: "2012-10-17"
       Statement:
       -
         Effect: Allow
         Action: [ 'ses:ListTemplates',
                   'ses:CreateTemplate',
                   'ses:GetTemplate',
                   'ses:UpdateTemplate',
                   'ses:SendTemplatedEmail',
                   'ses:GetTemplates'
         ]
         Resource: '*'
     Roles:
       - !Ref "mgmtPortalRole"
  mgmtPortalSSMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "thefirmu.ssm.allow"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: Allow
          Action: ['ssm:GetParameter']
          Resource: !Join ['',['arn:aws:ssm:',!Ref 'AWS::Region',':',!Ref 'AWS::AccountId',':parameter/a2c/*']]
      Roles:
        - !Ref "mgmtPortalRole"
  mgmtPortalRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['',['a2c-mgmt', !Ref Environment, '-role']]
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Statement:
        -
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
  mgmtPortalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: mgmt_handler.mgmt_handler
      CodeUri: ./mgmt/
      Role: !GetAtt ["mgmtPortalRole","Arn"]
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing 
      Subnets: !FindInMap [VPC2Subnet, !Ref "VpcId", Subnets]
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LambdaInvokePermission
    Properties:
      TargetType: lambda
      Targets:
      - Id: !GetAtt mgmtPortalFunction.Arn
  HttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Certificates: 
      - CertificateArn: 'arn:aws:acm:us-east-1:530317771161:certificate/457def3f-75de-447d-90a5-96af2c6690db'
      Port: 443
      Protocol: HTTPS
  CognitoAdminListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: 
      - theFirmuAdminDomain
      - theFirmuAdminCognitoClientSettings
    Properties: 
      Actions: 
        - Type: authenticate-cognito
          AuthenticateCognitoConfig:
            UserPoolArn: !GetAtt  ['theFirmuAdminCognitoPool','Arn']
            UserPoolClientId: !Ref theFirmuAdminCognitoClient
            UserPoolDomain: "thefirmu-admin"
          Order: 1
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
          Order: 2
      Conditions: 
        - Field: path-pattern
          Values: [ "/" ]
      ListenerArn: !Ref HttpsListener
      Priority: 1
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt mgmtPortalFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com
  dnsEntry:
    Type: AWS::Route53::RecordSet
    Properties: 
      Comment: DNS record for ALB
      HostedZoneName: thefirmu.org.
      Name: 'adminportal.thefirmu.org'
      ResourceRecords: 
        - !GetAtt LoadBalancer.DNSName
      TTL: 300
      Type: CNAME
Outputs:
  DynamoDBArn:
    Description: ARN of the Dynamo DB table
    Value: !GetAtt ["theFirmuDynamoDBTable","Arn"]
    Export:
      Name: !Sub "${AWS::StackName}-DynamoDBARN"
  mgmtRole:
    Description: ARN of the IAM role for mgmt
    Value: !Ref mgmtPortalRole
    Export:
      Name: !Sub "${AWS::StackName}-MgmtRole"
  ClientSettingsLambdaArn:
    Description: ARN of Client Settings lambda 
    Value: !GetAtt ["CloudFormationCognitoUserPoolClientSettings","Arn"]
    Export:
      Name: !Sub "${AWS::StackName}-CognitoClientSettingsLambda"
  ClientDomainLambdaArn:
    Description: ARN of Client Domain lambda 
    Value: !GetAtt ["CloudFormationCognitoUserPoolDomain","Arn"]
    Export:
      Name: !Sub "${AWS::StackName}-CognitoUserDomainLambda"
