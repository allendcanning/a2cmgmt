AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Athletes to College Portal
Globals:
  Function:
    Runtime: python3.7
    Timeout: 30
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-729d3814
Mappings:
  VPC2Subnet:
    vpc-729d3814:
      Subnets:
        - "subnet-76ade63f"
        - "subnet-8c44d6d7"
        - "subnet-be65cf82"
Resources:
  theFirmuCognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
         AllowAdminCreateUserOnly: True
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: False
        DeviceOnlyRememberedOnUserPrompt: False
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        ReplyToEmailAddress: admin@thefirmu.org
        SourceArn: !Join ['',['arn:aws:ses:',!Ref "AWS::Region",':',!Ref "AWS::AccountId",':identity/admin@thefirmu.org']]
      EmailVerificationMessage: "Your FirmU verification code is {####}. "
      EmailVerificationSubject: "Your FirmU verification code"
      MfaConfiguration: Off
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True
          RequireUppercase: True
          TemporaryPasswordValidityDays: 7
      Schema:
        - AttributeDataType: String
          Mutable: True
          Name: username
          Required: True
        - AttributeDataType: String
          Mutable: True
          Name: email
          Required: True
      UserPoolName: "thefirmu"
  theFirmuDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "username"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "username"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "thefirmu_user_info"
  theFirmuMgmtCognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: mgmt
      ExplicitAuthFlows: 
        - String
      GenerateSecret: True
      RefreshTokenValidity: 30
      UserPoolId: !Ref theFirmuCognitoPool
  cognitoPoolSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: /a2c/dev/cognito_pool
      Type: String
      Value: !Ref theFirmuCognitoPool
  cognitoClientIdSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: /a2c/dev/mgmt_cognito_client_id
      Type: String
      Value: !Ref theFirmuMgmtCognitoClient
  dynamoDBTableNameSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: /a2c/dev/table_name
      Type: String
      Value: !Ref theFirmuDynamoDBTable
  mgmtPortalCognitoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "thefirmu.cognito.allow"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: Allow
          Action: ['cognito-idp:AdminInitiateAuth', 'cognito-idp:AdminCreateUser']
          Resource: !Ref theFirmuCognitoPool
      Role: !Ref mgmtPortalRole
  mgmtPortalDynamoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "thefirmu.dynamodb.allow"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: Allow
          Action: [ "dynamodb:PutItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:Query",
                "dynamodb:UpdateItem"
          ]
          Resource: !GetAtt [theFirmuDynamoDBTable,'Arn']
      Role: !Ref mgmtPortalRole
  mgmtPortalSSMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "thefirmu.ssm.allow"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: Allow
          Action: ['ssm:GetParameter']
          Resource: !Join ['',['arn:aws:ssm:',!Ref 'AWS::Region',':',!Ref 'AWS::AccountId',':parameter/a2c/*']]
      Role: !Ref mgmtPortalRole
  mgmtPortalRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: a2c-mgmt-role
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  mgmtPortalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: mgmt_handler.mgmt_handler
      CodeUri: ./mgmt/
      Role: !Ref mgmtPortalRole
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing 
      Subnets: !FindInMap [VPC2Subnet, !Ref "VpcId", Subnets]
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LambdaInvokePermission
    Properties:
      TargetType: lambda
      Targets:
      - Id: !GetAtt mgmtPortalFunction.Arn
  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt mgmtPortalFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com
